{"ast":null,"code":"var _jsxFileName = \"/Users/joeyrodrigues/Desktop/Open-List/open-list/client/src/components/Session/withAuthentication.js\";\n// To keep the App component clean and concise, I like to extract the session handling \n// for the authenticated user to a separate higher-order component\nimport React from 'react';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\nconst withAuthentication = Component => {\n  class WithAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        authUser: null\n      };\n    }\n\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(authUser => {\n        console.log('YOOOOOOOO');\n        authUser ? this.setState({\n          authUser\n        }) : this.setState({\n          authUser: null\n        });\n      });\n    } //We also want to avoid memory leaks that lead to performance issues, so we'll remove the listener if the component unmounts.\n\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return (//The  component can use the new context to provide the authenticated user to components that are interested in it\n        React.createElement(AuthUserContext.Provider, {\n          value: this.state.authUser,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, React.createElement(Component, Object.assign({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        })))\n      );\n    }\n\n  }\n\n  return withFirebase(WithAuthentication);\n};\n\nexport default withAuthentication;","map":{"version":3,"sources":["/Users/joeyrodrigues/Desktop/Open-List/open-list/client/src/components/Session/withAuthentication.js"],"names":["React","AuthUserContext","withFirebase","withAuthentication","Component","WithAuthentication","constructor","props","state","authUser","componentDidMount","listener","firebase","auth","onAuthStateChanged","console","log","setState","componentWillUnmount","render"],"mappings":";AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,WAA5B;AACA,SAASC,YAAT,QAA6B,aAA7B;;AAEA,MAAMC,kBAAkB,GAAGC,SAAS,IAAI;AAEtC,QAAMC,kBAAN,SAAiCL,KAAK,CAACI,SAAvC,CAAiD;AAC/CE,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;AACA,WAAKC,KAAL,GAAa;AACXC,QAAAA,QAAQ,EAAE;AADC,OAAb;AAGD;;AACDC,IAAAA,iBAAiB,GAAG;AAClB,WAAKC,QAAL,GAAgB,KAAKJ,KAAL,CAAWK,QAAX,CAAoBC,IAApB,CAAyBC,kBAAzB,CACdL,QAAQ,IAAI;AACVM,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAP,QAAAA,QAAQ,GACJ,KAAKQ,QAAL,CAAc;AAAER,UAAAA;AAAF,SAAd,CADI,GAEJ,KAAKQ,QAAL,CAAc;AAAER,UAAAA,QAAQ,EAAE;AAAZ,SAAd,CAFJ;AAGD,OANa,CAAhB;AAQD,KAhB8C,CAkB/C;;;AAEAS,IAAAA,oBAAoB,GAAG;AACrB,WAAKP,QAAL;AACD;;AACDQ,IAAAA,MAAM,GAAG;AACP,aACU;AAER,4BAAC,eAAD,CAAiB,QAAjB;AAA0B,UAAA,KAAK,EAAE,KAAKX,KAAL,CAAWC,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,SAAD,oBAAe,KAAKF,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAHF;AAOD;;AA/B8C;;AAiCjD,SAAOL,YAAY,CAACG,kBAAD,CAAnB;AACD,CApCD;;AAsCA,eAAeF,kBAAf","sourcesContent":["\n// To keep the App component clean and concise, I like to extract the session handling \n// for the authenticated user to a separate higher-order component\n\nimport React from 'react';\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\nconst withAuthentication = Component => {\n    \n  class WithAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        authUser: null,\n      };\n    }\n    componentDidMount() {\n      this.listener = this.props.firebase.auth.onAuthStateChanged(\n        authUser => {\n          console.log('YOOOOOOOO')\n          authUser\n            ? this.setState({ authUser })\n            : this.setState({ authUser: null });\n        },\n      );\n    }\n\n    //We also want to avoid memory leaks that lead to performance issues, so we'll remove the listener if the component unmounts.\n\n    componentWillUnmount() {\n      this.listener();\n    }\n    render() {\n      return (\n                //The  component can use the new context to provide the authenticated user to components that are interested in it\n\n        <AuthUserContext.Provider value={this.state.authUser}>\n          <Component {...this.props} />\n        </AuthUserContext.Provider>\n      );\n    }\n  }\n  return withFirebase(WithAuthentication);\n};\n\nexport default withAuthentication;"]},"metadata":{},"sourceType":"module"}