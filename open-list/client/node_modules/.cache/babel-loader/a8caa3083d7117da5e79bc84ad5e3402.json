{"ast":null,"code":"import _objectSpread from \"/Users/joeyrodrigues/Desktop/Open-List/open-list/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/joeyrodrigues/Desktop/Open-List/open-list/client/src/components/Admin/index.js\";\nimport React, { Component } from 'react';\nimport { withFirebase } from '../Firebase'; // component's componentDidMount() lifecycle method is the perfect place to \n// fetch users from your Firebase realtime database API\n\nclass AdminPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      users: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    });\n    this.props.firebase.users().on('value', snapshot => {\n      const usersObject = snapshot.val();\n      const usersList = Object.keys(usersObject).map(key => _objectSpread({}, usersObject[key], {\n        uid: key\n      }));\n      this.setState({\n        users: usersList,\n        loading: false\n      });\n    });\n  } //Remember to remove the listener to avoid memory leaks from using the same \n  //reference with the off() method\n\n\n  componentWillUnmount() {\n    this.props.firebase.users().off();\n  }\n\n  render() {\n    const _this$state = this.state,\n          users = _this$state.users,\n          loading = _this$state.loading;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Admin\"), loading && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Loading ...\"), React.createElement(UserList, {\n      users: users,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst UserList = ({\n  users\n}) => React.createElement(\"ul\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53\n  },\n  __self: this\n}, users.map(user => React.createElement(\"li\", {\n  key: user.uid,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}, React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56\n  },\n  __self: this\n}, React.createElement(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57\n  },\n  __self: this\n}, \"ID:\"), \" \", user.uid), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n}, React.createElement(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n}, \"E-Mail:\"), \" \", user.email), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62\n  },\n  __self: this\n}, React.createElement(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n}, \"Username:\"), \" \", user.username)))); // const condition = authUser =>\n//   authUser && !!authUser.roles[ROLES.ADMIN];\n\n\nexport default withFirebase(AdminPage); // We are using the users reference from our Firebase class to \n// attach a listener. The listener is called on(), which receives a \n// type and a callback function. The on() method registers a continuous \n// listener that triggers every time something has changed, the once() \n// method registers a listener that would be called only once.","map":{"version":3,"sources":["/Users/joeyrodrigues/Desktop/Open-List/open-list/client/src/components/Admin/index.js"],"names":["React","Component","withFirebase","AdminPage","constructor","props","state","loading","users","componentDidMount","setState","firebase","on","snapshot","usersObject","val","usersList","Object","keys","map","key","uid","componentWillUnmount","off","render","UserList","user","email","username"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,QAA6B,aAA7B,C,CAGA;AACA;;AAEA,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AAChCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,KADE;AAEXC,MAAAA,KAAK,EAAE;AAFI,KAAb;AAID;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,CAAc;AAAEH,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,SAAKF,KAAL,CAAWM,QAAX,CAAoBH,KAApB,GAA4BI,EAA5B,CAA+B,OAA/B,EAAwCC,QAAQ,IAAI;AAElD,YAAMC,WAAW,GAAGD,QAAQ,CAACE,GAAT,EAApB;AAEA,YAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBK,GAAzB,CAA6BC,GAAG,sBAC7CN,WAAW,CAACM,GAAD,CADkC;AAEhDC,QAAAA,GAAG,EAAED;AAF2C,QAAhC,CAAlB;AAIA,WAAKV,QAAL,CAAc;AACZF,QAAAA,KAAK,EAAEQ,SADK;AAEZT,QAAAA,OAAO,EAAE;AAFG,OAAd;AAID,KAZD;AAaD,GAvB+B,CAyBhC;AACA;;;AACAe,EAAAA,oBAAoB,GAAG;AACrB,SAAKjB,KAAL,CAAWM,QAAX,CAAoBH,KAApB,GAA4Be,GAA5B;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBACoB,KAAKlB,KADzB;AAAA,UACCE,KADD,eACCA,KADD;AAAA,UACQD,OADR,eACQA,OADR;AAEP,WAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADA,EAECA,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFZ,EAGA,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEC,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHA,CAFF;AAQD;;AAzC+B;;AA4ClC,MAAMiB,QAAQ,GAAG,CAAC;AAAEjB,EAAAA;AAAF,CAAD,KACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGA,KAAK,CAACW,GAAN,CAAUO,IAAI,IACb;AAAI,EAAA,GAAG,EAAEA,IAAI,CAACL,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,OACwBK,IAAI,CAACL,GAD7B,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,OAC4BK,IAAI,CAACC,KADjC,CAJF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,OAC8BD,IAAI,CAACE,QADnC,CAPF,CADD,CADH,CADF,C,CAmBA;AACA;;;AAEA,eAAe1B,YAAY,CAACC,SAAD,CAA3B,C,CAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport { withFirebase } from '../Firebase';\n\n\n// component's componentDidMount() lifecycle method is the perfect place to \n// fetch users from your Firebase realtime database API\n\nclass AdminPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      users: [],\n    };\n  }\n  componentDidMount() {\n    this.setState({ loading: true });\n    this.props.firebase.users().on('value', snapshot => {\n      \n      const usersObject = snapshot.val();\n\n      const usersList = Object.keys(usersObject).map(key => ({\n        ...usersObject[key],\n        uid: key,\n      }));\n      this.setState({\n        users: usersList,\n        loading: false,\n      });\n    });\n  }\n\n  //Remember to remove the listener to avoid memory leaks from using the same \n  //reference with the off() method\n  componentWillUnmount() {\n    this.props.firebase.users().off();\n  }\n\n  render() {\n    const { users, loading } = this.state;\n    return (\n\n      <div>\n      <h1>Admin</h1>\n      {loading && <div>Loading ...</div>}\n      <UserList users={users} />\n    </div>\n    );\n  }\n}\n\nconst UserList = ({ users }) => (\n  <ul>\n    {users.map(user => (\n      <li key={user.uid}>\n        <span>\n          <strong>ID:</strong> {user.uid}\n        </span>\n        <span>\n          <strong>E-Mail:</strong> {user.email}\n        </span>\n        <span>\n          <strong>Username:</strong> {user.username}\n        </span>\n      </li>\n    ))}\n  </ul>\n);\n\n\n// const condition = authUser =>\n//   authUser && !!authUser.roles[ROLES.ADMIN];\n\nexport default withFirebase(AdminPage);\n\n// We are using the users reference from our Firebase class to \n// attach a listener. The listener is called on(), which receives a \n// type and a callback function. The on() method registers a continuous \n// listener that triggers every time something has changed, the once() \n// method registers a listener that would be called only once. \n"]},"metadata":{},"sourceType":"module"}